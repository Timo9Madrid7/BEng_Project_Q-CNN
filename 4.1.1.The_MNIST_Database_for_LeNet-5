{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from tensorflow.keras.datasets.mnist import load_data\n",
    "(train_images, train_labels), (test_images, test_labels) = load_data(path=\"D:/Jupyter/GitHub_BEng_Project/mnist_datasets/mnist.npz\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_images'shape: (60000, 32, 32, 1)\n",
      "train_labels'shape: (60000,)\n",
      "test_images'shape: (10000, 32, 32, 1)\n",
      "test_labels'shape: (10000,)\n",
      "Number of classes: [0 1 2 3 4 5 6 7 8 9]\n"
     ]
    }
   ],
   "source": [
    "# zero-pad to meet the input shape's requirement of LeNet\n",
    "train_images = np.pad(train_images,((0,0),(2,2),(2,2)),'constant')\n",
    "test_images = np.pad(test_images,((0,0),(2,2),(2,2)),'constant')\n",
    "\n",
    "# add the channel\n",
    "train_images = np.expand_dims(train_images,axis=3)\n",
    "test_images = np.expand_dims(test_images,axis=3)\n",
    "\n",
    "# Check the dataset\n",
    "print(\"train_images'shape:\", train_images.shape)\n",
    "print(\"train_labels'shape:\", train_labels.shape)\n",
    "print(\"test_images'shape:\", test_images.shape)\n",
    "print(\"test_labels'shape:\", test_labels.shape)\n",
    "print(\"Number of classes:\", np.unique(test_labels))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAagAAAGlCAYAAACvLGIeAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAAPYQAAD2EBqD+naQAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDMuMC4zLCBodHRwOi8vbWF0cGxvdGxpYi5vcmcvnQurowAACldJREFUeJzt3E2Iznsfx/H7f5ssiJENpaSxICQblJQkSbEYbKasyIqymo2dBSkPi+lYzErZyNLDhsV4WKipycNG2dPsGMZ4asz/3t0l5+T6OmfM53Jer/Wnf7+uxfXut/k1bdv+BwDS/HeuDwAAf0agAIgkUABEEigAIgkUAJEECoBIAgVAJIECIJJAARCpZ64P8GeapvG8BcBvrG3b5kcbNygAIgkUAJEECoBIAgVAJIECIJJAARBJoACIJFAARBIoACIJFACRBAqASAIFQCSBAiCSQAEQSaAAiCRQAEQSKAAiCRQAkQQKgEgCBUAkgQIgkkABEEmgAIgkUABEEigAIgkUAJEECoBIAgVAJIECIJJAARBJoACIJFAARBIoACIJFACRBAqASAIFQCSBAiCSQAEQSaAAiCRQAEQSKAAiCRQAkQQKgEgCBUAkgQIgkkABEEmgAIgkUABEEigAIgkUAJEECoBIAgVAJIECIJJAARBJoACIJFAARBIoACIJFACRBAqASAIFQCSBAiCSQAEQSaAAiCRQAEQSKAAiCRQAkQQKgEgCBUAkgQIgkkABEEmgAIgkUABEEigAIgkUAJEECoBIAgVAJIECIJJAARBJoACIJFAARBIoACL1zPUBoBvMmzevtO/t7Z2lk/ycEydOdLxdsGBB6dtr1qwp7Y8fP17aX7hwobQfGBjoePvp06fSt8+dO1fanz59urTnW25QAEQSKAAiCRQAkQQKgEgCBUAkgQIgkkABEEmgAIgkUABEEigAInnqiF9m5cqVpf38+fNL+23btpX227dv73i7ZMmS0rcPHjxY2nezly9flvZDQ0OlfX9/f2k/OTnZ8fbZs2elbz948KC05+9xgwIgkkABEEmgAIgkUABEEigAIgkUAJEECoBIAgVAJIECIJJAARBJoACI1LRtO9dn+E7TNHmH4jubNm0q7UdGRkr73t7e0p5/xszMTGl/5MiR0v79+/elfdX4+HjH2zdv3pS+/eLFi+px+Att2zY/2rhBARBJoACIJFAARBIoACIJFACRBAqASAIFQCSBAiCSQAEQSaAAiCRQAETyFh8/benSpaX96Ohoad/X11fad7PqbzMxMVHa79y5s+Ptly9fSt/2ZiI/w1t8AHQtgQIgkkABEEmgAIgkUABEEigAIgkUAJEECoBIAgVAJIECIJJAARCpZ64PQPd6/fp1aT84OFja79u3r7R/8uRJaT80NFTaVzx9+rS03717d2k/NTVV2q9fv77j7cmTJ0vfhtniBgVAJIECIJJAARBJoACIJFAARBIoACIJFACRBAqASAIFQCSBAiCSQAEQqWnbdq7P8J2mafIOxS+3ePHi0n5ycrK0Hx4e7nh79OjR0rcPHz5c2l+7dq20h27Xtm3zo40bFACRBAqASAIFQCSBAiCSQAEQSaAAiCRQAEQSKAAiCRQAkQQKgEgCBUCknrk+APyVd+/ezer33759O2vfPnbsWGl//fr10n5mZqa0h27kBgVAJIECIJJAARBJoACIJFAARBIoACIJFACRBAqASAIFQCSBAiBS07btXJ/hO03T5B2K387ChQs73t66dav07R07dpT2e/fuLe3v3r1b2kOatm2bH23coACIJFAARBIoACIJFACRBAqASAIFQCSBAiCSQAEQSaAAiCRQAEQSKAAieYsPOrB69erS/vHjx6X9xMREaX/v3r3SfmxsrOPt5cuXS99O/A8hn7f4AOhaAgVAJIECIJJAARBJoACIJFAARBIoACIJFACRBAqASAIFQCSBAiCSt/hgFvT395f2V65cKe0XLVpU2lecOnWqtL969WppPz4+Xtrze/IWHwBdS6AAiCRQAEQSKAAiCRQAkQQKgEgCBUAkgQIgkkABEEmgAIgkUABE8hYfBNiwYUNpf+nSpdJ+165dpX3F8PBwaX/mzJnS/tWrV6U93cFbfAB0LYECIJJAARBJoACIJFAARBIoACIJFACRBAqASAIFQCSBAiCSQAEQyVt80IWWLFlS2u/fv7/j7ZUrV0rfbpofPqn2jZGRkdJ+9+7dpT3dwVt8AHQtgQIgkkABEEmgAIgkUABEEigAIgkUAJEECoBIAgVAJIECIJKnjoBvfP78ubTv6ekp7aenp0v7PXv2lPb3798v7ZkbnjoCoGsJFACRBAqASAIFQCSBAiCSQAEQSaAAiCRQAEQSKAAiCRQAkQQKgEi1R7SAWbFx48bS/tChQ6X95s2bO95W39arev78eWn/8OHDWToJ6dygAIgkUABEEigAIgkUAJEECoBIAgVAJIECIJJAARBJoACIJFAARBIoACJ5iw86sGbNmtL+xIkTpf2BAwdK++XLl5f2s+nr16+l/fj4eGk/MzNT2vP7cIMCIJJAARBJoACIJFAARBIoACIJFACRBAqASAIFQCSBAiCSQAEQSaAAiOQtPn4b1ffpBgYGOt5W39ZbtWpVaZ9kbGystD9z5kxpf/PmzdKefy83KAAiCRQAkQQKgEgCBUAkgQIgkkABEEmgAIgkUABEEigAIgkUAJEECoBI3uLjl1m2bFlpv27dutL+jz/+KO3Xrl1b2icZHR0t7c+fP9/x9saNG6Vvz8zMlPbQKTcoACIJFACRBAqASAIFQCSBAiCSQAEQSaAAiCRQAEQSKAAiCRQAkTx1xP8tXbq0tB8eHi7tN23aVNr39fWV9kkePXpU2l+8eLG0v3PnTmn/8ePH0h4SuEEBEEmgAIgkUABEEigAIgkUAJEECoBIAgVAJIECIJJAARBJoACIJFAARPIWX5fZunVraT84ONjxdsuWLaVvr1ixorRP8+HDh463Q0NDpW+fPXu2tJ+amirt4d/ADQqASAIFQCSBAiCSQAEQSaAAiCRQAEQSKAAiCRQAkQQKgEgCBUAkgQIgkrf4ukx/f/+s7mfT8+fPS/vbt2+X9tPT06X9xYsXO95OTEyUvg38fW5QAEQSKAAiCRQAkQQKgEgCBUAkgQIgkkABEEmgAIgkUABEEigAIgkUAJGatm3n+gzfaZom71AA/GPatm1+tHGDAiCSQAEQSaAAiCRQAEQSKAAiCRQAkQQKgEgCBUAkgQIgkkABEEmgAIgkUABEEigAIgkUAJEECoBIAgVAJIECIJJAARBJoACIJFAARBIoACIJFACRBAqASAIFQCSBAiCSQAEQSaAAiCRQAEQSKAAiCRQAkQQKgEgCBUAkgQIgkkABEEmgAIgkUABEEigAIgkUAJEECoBIAgVAJIECIJJAARBJoACIJFAARBIoACIJFACRBAqASAIFQCSBAiCSQAEQSaAAiCRQAEQSKAAiCRQAkQQKgEgCBUAkgQIgkkABEKlp23auzwAA33GDAiCSQAEQSaAAiCRQAEQSKAAiCRQAkQQKgEgCBUAkgQIgkkABEEmgAIgkUABEEigAIgkUAJEECoBIAgVAJIECIJJAARBJoACIJFAARBIoACIJFACRBAqASAIFQCSBAiCSQAEQSaAAiCRQAEQSKAAiCRQAkQQKgEgCBUAkgQIg0v8AAIs2iwcc8fEAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 500x500 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The figure is 5\n"
     ]
    }
   ],
   "source": [
    "plt.figure(figsize=(5,5),dpi=100)\n",
    "plt.gray()\n",
    "plt.grid(False)\n",
    "plt.axis('off')\n",
    "plt.imshow(train_images[0,:,:,0])\n",
    "plt.show()\n",
    "print(\"The figure is\",train_labels[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
